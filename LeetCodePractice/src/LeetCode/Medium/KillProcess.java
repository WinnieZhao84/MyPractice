package LeetCode.Medium;

import java.util.*;

/**
 *
 * Given n processes, each process has a unique PID (process id) and its PPID (parent process id).
 *
 * Each process only has one parent process, but may have one or more children processes. This is just like a tree structure.
 * Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.
 *
 * We use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID.
 *
 * Now given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end.
 * You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.
 *
 * Example 1:
 * Input:
 * pid =  [1, 3, 10, 5]
 * ppid = [3, 0, 5, 3]
 *
 * kill = 5
 * Output: [5,10]
 *
 * Explanation:
 *      3
 *    /   \
 *   1     5
 *        /
 *       10
 *
 * Kill 5 will also kill 10.
 *
 * Note:
 * The given kill id is guaranteed to be one of the given PIDs.
 * n >= 1.
 *
 *
 * Created by WinnieZhao on 2017/5/15.
 */
public class KillProcess {
    public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {

        List<Integer> result = new ArrayList<>();

        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < pid.size(); ++i) {
            map.putIfAbsent(ppid.get(i), new ArrayList<>());
            map.get(ppid.get(i)).add(pid.get(i));
        }

        Queue<Integer> queue = new ArrayDeque<>();
        queue.add(kill);

        while (!queue.isEmpty()) {
            Integer process = queue.poll();

            result.add(process);
            if (map.containsKey(process)) {
                queue.addAll(map.get(process));
            }
        }

        return result;
    }

    public static void main(String[] args) {
        KillProcess solution = new KillProcess();
        Integer[] pid =  {54,345,67,105,346,391,48,384,378,203,344,329,172,440,136,160,279,278,40,20,338,262,202,38,408,120,198,237,132,483,112,284,139,331,298,318,296,82,412,388,484,246,42,141,343,207,431,293,191,47,447,14,49,200,390,79,352,465,180,81,151,496,416,225,418,295,174,480,364,334,129,75,361,199,291,358,4,171,244,236,110,88,33,2,304,407,186,178,386,368,273,145,228,159,249,195,193,83,243,59,187,255,289,126,89,469,104,70,147,52,473,422,307,7,57,64,367,9,61,248,183,213,362,487,122,302,223,442,376,326,377,142,87,452,127,435,294,219,254,253,227,264,66,224,221,395,93,23,309,208,162,406,245,214,270,24,250,301,286,311,268,486,299,175,463,424,330,438,477,176,272,271,85,5,280,457,417,356,220,288,427,31,165,158,324,45,342,15,11,13,107,340,497,256,155,363,327,206,281,55,285,403,398,131,117,116,383,204,143,44,466,312,153,21,163,19,78,351,197,137,410,90,169,217,426,50,74,181,489,369,467,267,43,323,347,366,16,210,475,498,216,161,443,306,290,333,436,470,149,10,109,234,283,27,393,101,482,266,106,441,189,134,257,73,86,46,211,300,375,25,404,485,71,170,84,488,396,69,374,373,235,494,22,185,212,130,456,321,349,53,499,313,164,113,472,121,77,434,133,167,359,103,152,394,449,218,458,118,144,62,226,36,448,353,389,308,68,265,39,461,450,242,305,18,173,468,405,182,95,34,360,192,231,238,322,355,365,230,379,96,154,314,445,339,397,148,111,400,188,92,35,460,332,94,481,51,166,402,474,124,382,123,430,500,150,381,453,263,476,179,491,108,432,341,6,387,428,446,30,56,282,252,451,222,287,135,292,3,492,97,478,98,91,372,140,316,102,114,414,247,315,276,409,459,241,325,464,258,58,72,119,215,348,354,454,336,490,205,177,421,156,310,357,76,320,350,385,37,29,201,493,41,32,275,168,146,60,184,444,157,138,12,115,433,415,260,269,411,370,399,429,471,229,439,303,194,232,1,371,28,274,319,297,328,495,209,337,251,462,317,261,437,380,425,190,335,17,128,240,259,196,99,479,65,80,455,277,8,392,233,420,63,26,423,100,401,125,239,419};
        Integer[] ppid = {218,489,191,283,322,450,176,13,68,359,417,425,389,488,373,190,392,107,62,338,499,349,253,370,334,113,242,173,57,237,29,440,290,396,46,133,192,398,160,63,66,3,67,71,162,94,151,179,248,45,314,222,223,216,178,78,30,299,307,371,61,4,247,95,455,318,427,281,177,44,31,240,6,466,374,415,70,168,158,324,186,436,316,310,120,447,352,56,249,51,7,38,144,441,106,498,344,200,202,86,267,306,208,328,142,421,84,201,409,260,386,213,88,210,8,146,181,230,480,317,469,451,443,69,381,234,464,117,115,109,221,309,456,34,468,294,125,79,37,268,380,227,448,185,345,169,72,101,219,382,131,251,111,182,129,232,327,331,325,105,257,279,139,312,483,457,360,407,98,336,388,245,280,241,255,402,145,264,73,391,93,48,206,195,148,433,171,229,383,319,276,59,18,75,246,414,130,97,167,165,481,108,490,114,25,207,193,287,285,265,405,478,21,55,302,305,17,90,341,225,197,288,426,358,387,445,372,311,274,47,166,411,301,342,354,418,348,54,286,473,315,376,378,204,239,53,83,395,400,211,10,199,127,453,291,452,361,147,476,140,362,442,149,2,497,9,356,226,262,256,89,399,474,492,263,278,235,292,266,92,470,351,238,228,320,28,385,123,42,100,77,300,463,39,19,126,215,491,118,209,155,304,137,494,270,393,41,172,33,364,461,16,102,357,252,377,284,423,375,394,350,183,81,80,429,157,156,390,406,104,337,121,379,212,366,214,458,170,152,295,459,484,14,64,444,408,32,420,128,431,103,254,369,401,27,124,308,220,138,22,355,87,60,43,475,467,434,449,135,432,487,184,49,346,164,340,486,134,175,339,422,323,136,203,153,112,26,500,438,273,52,347,465,329,462,282,143,269,313,224,36,303,236,116,289,332,243,217,471,343,233,11,74,482,412,495,99,261,493,15,189,365,363,119,477,194,163,65,297,472,272,141,35,161,437,326,154,333,416,122,419,174,259,91,12,231,335,159,430,205,435,198,76,0,244,150,460,293,180,410,353,424,403,439,85,40,296,368,188,132,397,187,330,321,258,404,496,275,20,196,58,23,298,271,5,24,446,1,110,428,384,479,82,96,50,454,367,277,485};

        List<Integer> result = solution.killProcess(Arrays.asList(pid), Arrays.asList(ppid), 141);
        System.out.println(result.toString());
    }

}
